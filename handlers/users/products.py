from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.inline.products import keybord_products, keybord_products_buy, keybord_products_cancel, \
    keybord_products_balance

from loader import dp
from utils.db_api import quick_commands as commands


@dp.callback_query_handler(text="back_menu_product", state="buy")
async def show_menu_a(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await state.finish()
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:", reply_markup=keybord_products)


@dp.callback_query_handler(text="cancel", state="buy_string")
async def cancel(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await state.finish()
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:", reply_markup=keybord_products)


@dp.callback_query_handler(text="string")
async def back_profile(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.delete()
    count = await commands.get_count_product()
    string = await commands.get_product_info('string')
    if count == '':
        count = 0
    await call.message.answer_photo(photo='https://ibb.co/Yjb7qb8',
                                    caption=f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                            f"üìÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –°—Ç—Ä–æ–∫–∏ üá∑üá∫|–î–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
                                            f"{string.description}\n\n"
                                            f"–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–æ–∫—É–ø–∫–µ: {count} —à—Ç.\n\n"
                                            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å {string.price} ‚ÇΩ —à—Ç.\n"
                                            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
                                    reply_markup=keybord_products_cancel)
    await state.set_state("buy_string")
    await state.update_data(count=count)
    await state.update_data(price=string.price)


@dp.message_handler(lambda message: not message.text.isdigit(), state="buy_string")
async def process_thing_invalid(message: types.Message):
    return await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")


@dp.message_handler(lambda message: message.text.isdigit(), state="buy_string")
async def update_currency(message: types.Message, state: FSMContext):
    number = message.text
    data = await state.get_data()
    count = data.get("count")
    price = data.get("price")
    summ = price * int(number)
    if int(number) > count:
        await message.answer(f"–ú–∞—Å–∫–∏–º–∞–ª—å–Ω–∞—è  —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {count}\n\n"
                             f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.", reply_markup=keybord_products_cancel)
        await state.set_state("buy_string")
    elif int(number) < 2:
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª–±–Ω–∞—è  —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 2\n\n"
                             f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.", reply_markup=keybord_products_cancel)
        await state.set_state("buy_string")
    else:
        await message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ {number} —Å—Ç—Ä–æ–∫.\n\n"
                             f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {summ} —Ä.\n\n"
                             f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keybord_products_buy)
        await state.set_state("buy")
        await state.update_data(number=int(number))
        await state.update_data(summ=int(summ))


@dp.callback_query_handler(text="buy", state="buy")
async def buy(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    data = await state.get_data()
    number = data.get("number")
    summ = data.get("summ")
    user = await commands.select_user(call.message.chat.id)
    balance = user.balance - summ
    if balance >= 0:
        strings = await commands.get_product(count=int(number), user_id=call.message.chat.id)
        await commands.update_balance_buy(id=call.message.chat.id, summ=balance)
        for string in strings:
            await call.message.answer(string.string)
        await dp.bot.send_message(-1001657326519,
                                  f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.message.chat.username} (id:/{user.id}), –∫—É–ø–∏–ª {number} —Å—Ç—Ä–æ–∫")
        await state.finish()
    else:
        await state.finish()
        balance *= -1
        await call.message.answer(f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {balance}, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å",
                                  reply_markup=keybord_products_balance)
