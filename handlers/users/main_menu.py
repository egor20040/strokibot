from aiogram import types
from aiogram.dispatcher import FSMContext

from data.config import CHANNEL_ID, NOTSUB_MESSAGE
from keyboards.default.main_menu import main_menu
from keyboards.inline.channel_subscription import subscription_keyboard
from keyboards.inline.products import keybord_products
from keyboards.inline.profile import keybord_add_money
from loader import dp
from utils.db_api import quick_commands as commands


def check_sub_channel(chat_member):
    if chat_member['status'] != 'left':
        return True
    else:
        return False


@dp.callback_query_handler(text="subchanneldone")
async def sub_channel_done(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer(cache_time=60)
    if check_sub_channel(await dp.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=call.from_user.id)):
        await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É ‚ò∫Ô∏è, –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç")
    else:
        await call.message.answer("–ù–µ –Ω–∞—à–µ–ª –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª",
                                  reply_markup=subscription_keyboard)


@dp.callback_query_handler(text="back_menu")
async def back_profile(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—É–∂–Ω–∞ –Ω–∏–∂–µ:", reply_markup=main_menu)


@dp.message_handler(text='–û—Ç–º–µ–Ω–∞')
async def main_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—É–∂–Ω–∞ –Ω–∏–∂–µ:", reply_markup=main_menu)


@dp.message_handler(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", state='*')
async def show_menu(message: types.Message, state: FSMContext):
    await state.finish()
    if check_sub_channel(await dp.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
        user = await commands.select_user(message.from_user.id)
        buy_string = await commands.get_purchases_count(message.chat.id)
        bot_user = await dp.bot.get_me()
        await message.answer(f"üîë ID: {message.from_user.id}\n"
                             f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}.0 RUB\n"
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             f"üí∏ –í—ã –∫—É–ø–∏–ª–∏ —Å—Ç—Ä–æ–∫: {buy_string}\n"
                             f"üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {user.bonus_string}\n"
                             f"üó£ –ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user.invited}\n"
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             f"ü§ù –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: http://t.me/{bot_user.username}?start={message.chat.id}",
                             reply_markup=keybord_add_money, disable_web_page_preview=True)
    else:
        await message.answer(NOTSUB_MESSAGE, reply_markup=subscription_keyboard)


@dp.message_handler(text="üìñ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", state='*')
async def show_menu(message: types.Message, state: FSMContext):
    await state.finish()
    if check_sub_channel(await dp.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:", reply_markup=keybord_products)
    else:
        await message.answer(NOTSUB_MESSAGE, reply_markup=subscription_keyboard)


@dp.message_handler(text="üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", state='*')
async def show_menu(message: types.Message, state: FSMContext):
    await state.finish()
    if check_sub_channel(await dp.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
        text = [
            ' –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º, –∞ —Ç–∞–∫ –∂–µ,–µ—Å–ª–∏ —É –≤–∞—Å –ø–æ–ø–∞–ª—Å—è —Ç–æ–≤–∞—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–ø–∏—Å–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞. –¢–æ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ : @suneeni',
        ]
        await message.answer('\n'.join(text))
    else:
        await message.answer(NOTSUB_MESSAGE, reply_markup=subscription_keyboard)
