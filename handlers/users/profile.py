import os

from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hlink, hcode, hbold
import logging

from data import config

from documents.locate import DOC_DIR

from keyboards.default.main_menu import main_menu
from aiogram.dispatcher import FSMContext
import datetime as dt

from keyboards.inline.callback_datas import set_paid

from keyboards.inline.payment import paid_keyboard
from keyboards.inline.profile import keybord_add_money, keyboard_method_replenishment
from utils.db_api import quick_commands as commands
from loader import dp
from utils.misc.qiwi import Payment, NoPaymentFound, NotEnoughMoney


@dp.callback_query_handler(text="get_bonus_lines")
async def back_profile(call: types.CallbackQuery):
    user = await commands.select_user(call.message.chat.id)
    if user.bonus_string > 0:
        stroki = await commands.get_product(count=user.bonus_string, user_id=call.message.chat.id)
        await commands.update_bonus_string(id=call.message.chat.id)
        for u in stroki:
            await call.message.answer(u.string)
        await dp.bot.send_message(-1001657326519,
                                  f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.message.chat.username} (id:/{user.id}), –ø–æ–ª—É—á–∏–ª {user.bonus_string}  –±–æ–Ω—É—Å–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
    else:
        await call.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ–Ω—É—Å–Ω—ã—Ö —Å—Ç—Ä–æ–∫, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n\n"
            "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 2 —Å—Ç—Ä–æ–∫–∏")


@dp.callback_query_handler(text="get_lines")
async def back_profile(call: types.CallbackQuery):
    buy_string = await commands.get_purchases(call.message.chat.id)
    buy_count = await commands.get_purchases_count(call.message.chat.id)
    await call.answer(cache_time=60)
    if buy_count == 0:
        await call.message.answer("–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–∏–ª–∏")
    else:
        with open(f"documents/{call.message.chat.id}.txt", "w", encoding="UTF8") as file:
            for string in buy_string:
                updated_at = string.updated_at + dt.timedelta(hours=3)
                date = updated_at.strftime('%H:%M %d.%m.%y')
                file.write(f"{string.string} , –∫—É–ø–ª–µ–Ω - {date}\n")

        f = open(DOC_DIR / f"{call.message.chat.id}.txt", "rb")
        await dp.bot.send_document(chat_id=call.message.chat.id, document=f)
        os.remove(f"documents/{call.message.chat.id}.txt")


@dp.callback_query_handler(text="method")
async def method_replenishment(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.delete()
    await call.message.answer(hbold("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"), reply_markup=keyboard_method_replenishment)


@dp.callback_query_handler(text="add_money")
async def back_profile(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.delete()
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    await state.set_state("add_money")


@dp.callback_query_handler(text="back_profile", state="paid")
async def back_profile(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.answer(cache_time=60)
    await call.message.delete()
    bot_user = await dp.bot.get_me()
    buy_string = await commands.get_purchases_count(call.message.chat.id)
    user = await commands.select_user(call.message.chat.id)
    await call.message.answer(f"üîë ID: {call.message.from_user.id}\n"
                              f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}.0 RUB\n"
                              "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                              f"üí∏ –í—ã –∫—É–ø–∏–ª–∏ —Å—Ç—Ä–æ–∫: {buy_string}\n"
                              f"üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {user.bonus_string}\n"
                              f"üó£ –ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user.invited}\n"
                              "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                              f"ü§ù –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: http://t.me/{bot_user.username}?start={call.message.chat.id}",
                              reply_markup=keybord_add_money, disable_web_page_preview=True)


@dp.message_handler(lambda message: not message.text.isdigit(), state="add_money")
async def process_sum_invalid(message: types.Message):
    return await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")


@dp.message_handler(lambda message: message.text.isdigit(), state="add_money")
async def update_currency(message: types.Message, state: FSMContext):
    summ = message.text
    payment = Payment(amount=summ)
    payment.create()
    await message.answer(
        "\n".join(
            [
                f"‚ûñ‚ûñ‚ûñ‚ûñ # {hcode(payment.id)}‚ûñ‚ûñ‚ûñ‚ûñ",
                f"‚òéÔ∏è –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {hcode(config.WALLET_QIWI)}",
                f"üí∞ –°—É–º–º–∞: {summ} ‚ÇΩ",
                f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {hcode(payment.id)}",
                f"{hbold('–í–ê–ñ–ù–û')} –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 1–≤1",
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
            ]
        ),
        reply_markup=paid_keyboard(payment.invoice)
    )
    await state.set_state("paid")
    await state.update_data(payment=payment)
    await state.update_data(summ=summ)


@dp.callback_query_handler(set_paid.filter(text_name="paid"), state="paid")
async def show_paid(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    summ = data.get("summ")
    payment: Payment = data.get("payment")
    try:
        payment.check_payment()
    except NoPaymentFound:
        await dp.bot.answer_callback_query(callback_query_id=call.id, text="–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=False)
    except NotEnoughMoney:
        await dp.bot.answer_callback_query(callback_query_id=call.id, text="–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥", show_alert=False)
    else:
        await commands.update_balance(id=call.message.chat.id, summ=int(summ))
        user = await commands.select_user(call.message.chat.id)
        await call.message.answer(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
                                  f"\n"
                                  f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}"
                                  ,
                                  reply_markup=main_menu)

        try:
            await dp.bot.send_message(-1001657326519,
                                      f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.message.chat.username} (id:/{user.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {summ}")
        except Exception as err:
            logging.exception(err)
        await state.finish()
